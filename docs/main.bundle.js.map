{"version":3,"sources":["D:/workspace.web/angular-forms/src/$_lazy_route_resource lazy","D:/workspace.web/angular-forms/src/app/account/account.model.ts","D:/workspace.web/angular-forms/src/app/account/account.service.ts","D:/workspace.web/angular-forms/src/app/account/confirm/confirm.component.css","D:/workspace.web/angular-forms/src/app/account/confirm/confirm.component.html","D:/workspace.web/angular-forms/src/app/account/confirm/confirm.component.ts","D:/workspace.web/angular-forms/src/app/account/login/login.component.css","D:/workspace.web/angular-forms/src/app/account/login/login.component.html","D:/workspace.web/angular-forms/src/app/account/login/login.component.ts","D:/workspace.web/angular-forms/src/app/account/security-questions/security-questions.component.css","D:/workspace.web/angular-forms/src/app/account/security-questions/security-questions.component.html","D:/workspace.web/angular-forms/src/app/account/security-questions/security-questions.component.ts","D:/workspace.web/angular-forms/src/app/account/signup/signup.component.css","D:/workspace.web/angular-forms/src/app/account/signup/signup.component.html","D:/workspace.web/angular-forms/src/app/account/signup/signup.component.ts","D:/workspace.web/angular-forms/src/app/app-routing.module.ts","D:/workspace.web/angular-forms/src/app/app.component.css","D:/workspace.web/angular-forms/src/app/app.component.html","D:/workspace.web/angular-forms/src/app/app.component.ts","D:/workspace.web/angular-forms/src/app/app.module.ts","D:/workspace.web/angular-forms/src/environments/environment.ts","D:/workspace.web/angular-forms/src/main.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,yF;;;;;;;;ACVA;AAAA;IAIE,4DAA4D;IAC5D,qBAAqB;IACrB,iBAAmB,SAAiB,EACjB,QAAgB,EAChB,WAAmB,EACnB,KAAa,EACb,QAAgB,EAChB,OAAe;QALf,cAAS,GAAT,SAAS,CAAQ;QACjB,aAAQ,GAAR,QAAQ,CAAQ;QAChB,gBAAW,GAAX,WAAW,CAAQ;QACnB,UAAK,GAAL,KAAK,CAAQ;QACb,aAAQ,GAAR,QAAQ,CAAQ;QAChB,YAAO,GAAP,OAAO,CAAQ;IAClC,CAAC;IAED,gCAAc,GAAd;QACE,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAEpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChC,MAAM,IAAI,GAAG,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,6BAAW,GAAX,UAAY,QAAY;QACtB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACH,cAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;AC5BwC;AAIzC;IAIE;IAEA,CAAC;IAED,gCAAO,GAAP,UAAQ,OAAgB;QACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,mCAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAfU,cAAc;QAD1B,yEAAU,EAAE;;OACA,cAAc,CAgB1B;IAAD,qBAAC;CAAA;AAhB0B;;;;;;;;ACJ3B;AACA;;;AAGA;AACA,mDAAoD,wBAAwB,KAAK,wBAAwB,mBAAmB,4BAA4B,KAAK,kCAAkC,+BAA+B,KAAK,0FAA0F,8BAA8B;;AAE3V;;;AAGA;AACA,2C;;;;;;;ACXA,qWAAqW,qBAAqB,mHAAmH,oBAAoB,sHAAsH,uBAAuB,+GAA+G,iBAAiB,kHAAkH,4BAA4B,uaAAua,0BAA0B,6IAA6I,cAAc,wL;;;;;;;;;;;;;;;;;;;;;ACAt8C;AACA;AAEX;AAOvC;IAIE,0BAAoB,cAA8B,EAC9B,MAAc;QADd,mBAAc,GAAd,cAAc,CAAgB;QAC9B,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEvC,mCAAQ,GAAR;QACE,yDAAyD;QACzD,iBAAiB;QACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;QAEhD,gBAAgB;QAChB,EAAE,EAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAhBU,gBAAgB;QAL5B,wEAAS,CAAC;YACT,QAAQ,EAAE,aAAa;;;SAGxB,CAAC;yCAKoC,wEAAc;YACtB,+DAAM;OALvB,gBAAgB,CAiB5B;IAAD,uBAAC;CAAA;AAjB4B;;;;;;;;ACV7B;AACA;;;AAGA;AACA,2CAA4C,mBAAmB,0BAA0B,KAAK,8BAA8B,kBAAkB,oBAAoB,KAAK,yBAAyB,qBAAqB,yBAAyB,KAAK;;AAEnP;;;AAGA;AACA,2C;;;;;;;ACXA,yqC;;;;;;;;;;;;;;;;;;;;ACAkD;AACX;AAQvC;IAIE,wBAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAFlC,gBAAW,GAAY,KAAK,CAAC;IAES,CAAC;IAEvC,iCAAQ,GAAR;IACA,CAAC;IAED,iCAAQ,GAAR;QACE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;IACpC,CAAC;IAED,iCAAQ,GAAR,UAAS,MAAc;QAAvB,iBAKC;QAJC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,UAAU,CAAC;YACT,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3B,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IAlBU,cAAc;QAL1B,wEAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;;SAGtB,CAAC;yCAK4B,+DAAM;OAJvB,cAAc,CAmB1B;IAAD,qBAAC;CAAA;AAnB0B;;;;;;;;ACT3B;AACA;;;AAGA;AACA,2CAA4C,yBAAyB,KAAK,qBAAqB,sBAAsB,uBAAuB,KAAK;;AAEjJ;;;AAGA;AACA,2C;;;;;;;ACXA,wsCAAwsC,oBAAoB,kJAAkJ,qGAAqG,QAAQ,wQAAwQ,GAAG,s5C;;;;;;;;;;;;;;;;;;;;;;ACAprD;AAC2B;AAC3B;AAEX;AAOvC;IAsBE,oCAAoB,cAA8B,EAC9B,MAAc;QADd,mBAAc,GAAd,cAAc,CAAgB;QAC9B,WAAM,GAAN,MAAM,CAAQ;QAlBlC,qBAAgB,GAAW,CAAC,CAAC;QAG7B,uBAAkB,GAAa,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACtD,sBAAiB,GAAa;YAC5B,8BAA8B;YAC9B,iCAAiC;YACjC,+BAA+B;YAC/B,6BAA6B;YAC7B,0BAA0B;SAC3B,CAAC;QAEF,sBAAiB,GAAU,EAAE,CAAC;IAMQ,CAAC;IAEvC,6CAAQ,GAAR;QAEE,EAAE,EAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7B,CAAC;QAED,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAE3B,sBAAsB;QACtB,IAAI,CAAC,YAAY,GAAG,IAAI,iEAAS,CAAC;YAChC,OAAO,EAAE,IAAI,mEAAW,CAAC,IAAI,EAAE;gBAC7B,kEAAU,CAAC,QAAQ;gBACnB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;aACrC,CAAC;YAEF,2CAA2C;YAC3C,mBAAmB,EAAE,IAAI,iEAAS,CAAC,EAAE,CAAC;SACvC,CAAC,CAAC;IACL,CAAC;IAED,qDAAgB,GAAhB;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IAClC,CAAC;IAED,yDAAoB,GAApB,UAAqB,OAAoB;QACvC,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,KAAK,IAAI;cAChC,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;QAEvC,2DAA2D;QAC3D,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,EAAC,eAAe,EAAE,IAAI,EAAC,CAAC;QACjC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,0DAAqB,GAArB;QACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,gBAAgB,CAAC;IACzD,CAAC;IAED,kDAAa,GAAb;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAM,SAAS,GAA0B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,mBAAmB,CAAE,CAAC;QACrF,SAAS,CAAC,IAAI,CAAC,IAAI,mEAAW,CAAC,IAAI,EAAE,kEAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,iDAAY,GAAZ,UAAa,KAAK,EAAE,QAAQ,EAAE,MAAM;QAClC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,YAAE,MAAM,UAAE,CAAC;IACvD,CAAC;IAED,sDAAiB,GAAjB;QAEE,IAAM,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;QAC7D,EAAE,EAAC,sBAAsB,KAAK,CAAC,IAAI,sBAAsB,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAClF,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,yBAAyB;QACzB,GAAG,EAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,sBAAsB,EAAE,CAAC,EAAE,EAAE,CAAC;YAC/C,GAAG,EAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,sBAAsB,EAAE,CAAC,EAAE,EAAE,CAAC;gBAE/C,+BAA+B;gBAC/B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACZ,QAAQ,CAAC;gBACX,CAAC;gBAED,yDAAyD;gBACzD,IAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;gBACtD,IAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;gBACtD,EAAE,EAAC,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC;oBACvB,MAAM,CAAC,KAAK,CAAC;gBACf,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,6CAAQ,GAAR;QAAA,iBA4BC;QA3BC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAElD,EAAE,EAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAE3B,2CAA2C;YAC3C,EAAE,EAAC,OAAO,IAAI,CAAC,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC;gBAC1C,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChC,CAAC;YAED,kDAAkD;YAClD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;gBAC3B,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC/B,CAAC,EAAE,IAAI,CAAC,CAAC;YAET,MAAM,CAAC;QACT,CAAC;QAED,4DAA4D;QAC5D,0CAA0C;QAC1C,IAAI,OAAO,GAAY,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;QACxD,OAAO,CAAC,WAAW,CAAC;YAClB,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK;YAC7C,WAAW,EAAE,IAAI,CAAC,iBAAiB;SACpC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;IACpC,CAAC;IAvIU,0BAA0B;QALtC,wEAAS,CAAC;YACT,QAAQ,EAAE,wBAAwB;;;SAGnC,CAAC;yCAuBoC,wEAAc;YACtB,+DAAM;OAvBvB,0BAA0B,CAwItC;IAAD,iCAAC;CAAA;AAxIsC;;;;;;;;ACXvC;AACA;;;AAGA;AACA,0CAA2C,kBAAkB,uBAAuB,wBAAwB,KAAK,oBAAoB,oBAAoB,iBAAiB,oBAAoB,KAAK;;AAEnM;;;AAGA;AACA,2C;;;;;;;ACXA,0kDAA0kD,MAAM,q5D;;;;;;;;;;;;;;;;;;;;;;;ACArhD;AACZ;AACR;AACW;AACT;AAOzC;IAUE,yBAAoB,OAAuB,EAAU,MAAc;QAA/C,YAAO,GAAP,OAAO,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;QARnE,iBAAY,GAAa,CAAC,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IAQiB,CAAC;IAExE,kCAAQ,GAAR;QACE,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;IACnC,CAAC;IAED,kCAAQ,GAAR,UAAS,UAAkB;QAEzB,EAAE,EAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YAEpB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,+DAAO,CAC9B,UAAU,CAAC,KAAK,CAAC,SAAS,EAC1B,UAAU,CAAC,KAAK,CAAC,QAAQ,EACzB,UAAU,CAAC,KAAK,CAAC,WAAW,EAC5B,UAAU,CAAC,KAAK,CAAC,KAAK,EACtB,UAAU,CAAC,KAAK,CAAC,QAAQ,EACzB,UAAU,CAAC,KAAK,CAAC,eAAe,CACjC,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,iCAAO,GAAP;QACE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC5B,WAAW,EAAE,MAAM;YACnB,UAAU,EAAE,MAAM;YAClB,aAAa,EAAE,KAAK;YACpB,OAAO,EAAE,mBAAmB;YAC5B,UAAU,EAAE,QAAQ;YACpB,iBAAiB,EAAE,QAAQ;SAC5B,CAAC,CAAC;IACL,CAAC;IAED,yCAAe,GAAf;QACE,IAAM,OAAO,GAAY,IAAI,CAAC,iBAAiB,EAAE;eACpC,IAAI,CAAC,mBAAmB,EAAE;eAC1B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;QAEnC,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IACD,6CAAmB,GAAnB;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACjE,CAAC;IAED,2CAAiB,GAAjB;QACE,IAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC/B,IAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;QACvC,MAAM,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;IACpD,CAAC;IAtDuB;QAAvB,yEAAS,CAAC,WAAW,CAAC;;sDAAW;IACX;QAAtB,yEAAS,CAAC,UAAU,CAAC;kCAAW,+DAAO;qDAAC;IACX;QAA7B,yEAAS,CAAC,iBAAiB,CAAC;kCAAkB,+DAAO;4DAAC;IAC9B;QAAxB,yEAAS,CAAC,YAAY,CAAC;kCAAa,8DAAM;uDAAC;IARjC,eAAe;QAL3B,wEAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAW6B,wEAAc,EAAkB,+DAAM;OAVxD,eAAe,CA4D3B;IAAD,sBAAC;CAAA;AA5D2B;;;;;;;;;;;;;;;;;;;;;;ACXW;AACM;AAEqB;AACH;AACM;AACgC;AAErG,IAAM,SAAS,GAAG;IAChB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,sFAAc,EAAE;IACvC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,yFAAe,EAAE;IAC9C,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,4HAA0B,EAAE;IAC3D,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,4FAAgB,EAAE;CACjD,CAAC;AAUF;IAAA;IAEA,CAAC;IAFY,gBAAgB;QAR5B,uEAAQ,CAAC;YACR,OAAO,EAAE;gBACP,qEAAY,CAAC,OAAO,CAAC,SAAS,CAAC;aAChC;YACD,OAAO,EAAE;gBACP,qEAAY;aACb;SACF,CAAC;OACW,gBAAgB,CAE5B;IAAD,uBAAC;CAAA;AAF4B;;;;;;;;ACvB7B;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA,2C;;;;;;;ACXA,+F;;;;;;;;;;;;;;;;;;;;ACAgD;AAEP;AAOzC;IAEE,sBAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAClC,CAAC;IAED,+BAAQ,GAAR;IAEA,CAAC;IAED,+BAAQ,GAAR,UAAS,SAAiB;QACxB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAChC,CAAC;IAXU,YAAY;QALxB,wEAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAG4B,+DAAM;OAFvB,YAAY,CAcxB;IAAD,mBAAC;CAAA;AAdwB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTiC;AACjB;AAGM;AACmB;AACvB;AACW;AACc;AACH;AACM;AACd;AAC8C;AAqBvG;IAAA;IAAyB,CAAC;IAAb,SAAS;QAlBrB,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,oEAAY;gBACZ,yFAAe;gBACf,sFAAc;gBACd,4FAAgB;gBAChB,6HAA0B;aAC3B;YACD,OAAO,EAAE;gBACP,gFAAa;gBACb,mEAAW;gBACX,2EAAmB;gBACnB,iEAAU;gBACV,6EAAgB;aACjB;YACD,SAAS,EAAE,CAAE,gFAAc,CAAE;YAC7B,SAAS,EAAE,CAAC,oEAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;ACjCtB;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEzE,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;;;;;;;;;;;;;;ACP6C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,8EAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,+EAAc,EAAE,CAAC;AACnB,CAAC;AAED,yGAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/$$_lazy_route_resource lazy\n// module id = ../../../../../src/$$_lazy_route_resource lazy recursive\n// module chunks = main","export class Account {\r\n\r\n  security: {};\r\n\r\n  // would never pass passwords around like this, but just for\r\n  // the sample project\r\n  constructor(public firstname: string,\r\n              public lastname: string,\r\n              public accountType: string,\r\n              public email: string,\r\n              public password: string,\r\n              public confirm: string) {\r\n  }\r\n\r\n  hiddenPassword() {\r\n    let hidden = '';\r\n    const length = this.password.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      hidden += '*';\r\n    }\r\n\r\n    return hidden;\r\n  }\r\n\r\n  setSecurity(security: {}) {\r\n    this.security = security;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/app/account/account.model.ts","import {Injectable} from '@angular/core';\r\nimport {Account} from './account.model';\r\n\r\n@Injectable()\r\nexport class AccountService {\r\n\r\n  account: Account;\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  confirm(account: Account) {\r\n    console.log(JSON.stringify(account));\r\n    this.account = account;\r\n  }\r\n\r\n  getAccount() {\r\n    return this.account;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/app/account/account.service.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".confirm-container small {\\r\\n  margin-left: 10px;\\r\\n}\\r\\n\\r\\n.confirm-label {\\r\\n  width: 120px;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.confirm-question-answer {\\r\\n  padding:10px 10px 0 10px;\\r\\n}\\r\\n\\r\\n/** hacky, but only a learning project... **/\\r\\n.confirm-question-answer-bottom {\\r\\n  padding-bottom:10px\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/account/confirm/confirm.component.css\n// module id = ../../../../../src/app/account/confirm/confirm.component.css\n// module chunks = main","module.exports = \"<div class=\\\"row\\\" *ngIf=\\\"account != null\\\">\\n  <div class=\\\"confirm-container\\\">\\n\\n    <div class=\\\"page-header\\\">\\n      <h3><span class=\\\"glyphicon glyphicon-ok\\\"></span> Confirm Account</h3>\\n    </div>\\n\\n    <ul class=\\\"list-group\\\">\\n      <li class=\\\"list-group-item\\\"><h4><span class=\\\"confirm-label\\\">First name</span><small>{{ account.firstname }}</small></h4></li>\\n      <li class=\\\"list-group-item\\\"><h4><span class=\\\"confirm-label\\\">Last name</span><small>{{ account.lastname }}</small></h4></li>\\n      <li class=\\\"list-group-item\\\"><h4><span class=\\\"confirm-label\\\">Account type</span><small>{{ account.accountType }}</small></h4></li>\\n      <li class=\\\"list-group-item\\\"><h4><span class=\\\"confirm-label\\\">Email</span><small>{{ account.email }}</small></h4></li>\\n      <li class=\\\"list-group-item\\\"><h4><span class=\\\"confirm-label\\\">Password</span><small>{{ account.hiddenPassword() }}</small></h4></li>\\n    </ul>\\n\\n    <div class=\\\"panel panel-default confirm-question-answer-bottom\\\">\\n      <div class=\\\"panel-heading\\\"><span class=\\\"glyphicon glyphicon-lock\\\"></span> Security</div>\\n\\n      <div class=\\\"confirm-question-answer\\\">\\n        <label>Are you a robot?</label>\\n        <input type=\\\"text\\\"\\n               disabled=\\\"true\\\"\\n               class=\\\"form-control\\\"\\n               value=\\\"{{ account.security.robot }}\\\">\\n      </div>\\n\\n      <div *ngFor=\\\"let q of account.security.questions\\\"\\n        class=\\\"confirm-question-answer\\\">\\n        <label>{{ q.question }}</label>\\n        <input type=\\\"text\\\" disabled=\\\"true\\\"\\n               class=\\\"form-control\\\"\\n               [value]=\\\"q.answer\\\">\\n      </div>\\n\\n    </div>\\n\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/account/confirm/confirm.component.html\n// module id = ../../../../../src/app/account/confirm/confirm.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport {AccountService} from '../account.service';\nimport {Account} from '../account.model';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-confirm',\n  templateUrl: './confirm.component.html',\n  styleUrls: ['./confirm.component.css']\n})\nexport class ConfirmComponent implements OnInit {\n\n  account: Account;\n\n  constructor(private accountService: AccountService,\n              private router: Router) { }\n\n  ngOnInit() {\n    // not exactly how account confirmation would play out in\n    // the real world\n    this.account = this.accountService.getAccount();\n\n    // navigate away\n    if(this.account == null) {\n      this.router.navigate(['signup']);\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/app/account/confirm/confirm.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".login-container {\\r\\n  width: 250px;\\r\\n  margin:150px auto 0;\\r\\n}\\r\\n\\r\\n.form-action-buttons {\\r\\n  width:145px;\\r\\n  margin:0 auto;\\r\\n}\\r\\n\\r\\n.sign-in-danger {\\r\\n  font-size:12px;\\r\\n  text-align: center;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/account/login/login.component.css\n// module id = ../../../../../src/app/account/login/login.component.css\n// module chunks = main","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"login-container\\\">\\n\\n    <form (ngSubmit)=\\\"onSubmit(loginForm)\\\" #loginForm=\\\"ngForm\\\">\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"username\\\">Login</label>\\n        <input type=\\\"text\\\" name=\\\"username\\\" class=\\\"form-control\\\"  id=\\\"username\\\" placeholder=\\\"Username or email\\\">\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" name=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\"\\n               placeholder=\\\"******************\\\">\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <div class=\\\"form-action-buttons\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-default\\\">Log in</button>\\n          <button type=\\\"button\\\"\\n                  class=\\\"btn btn-primary\\\"\\n                  (click)=\\\"onSignUp()\\\">Sign up</button>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <div class=\\\"alert alert-danger sign-in-danger\\\" role=\\\"alert\\\" *ngIf=\\\"isSubmitted\\\">\\n          <p>Log in is not functional for this exercise.</p>\\n        </div>\\n      </div>\\n\\n    </form>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/account/login/login.component.html\n// module id = ../../../../../src/app/account/login/login.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  isSubmitted: boolean = false;\n\n  constructor(private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  onSignUp() {\n    this.router.navigate(['/signup']);\n  }\n\n  onSubmit(ngForm: NgForm) {\n    this.isSubmitted = true;\n    setTimeout(() => {\n      this.isSubmitted = false;\n    }, 3000);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/app/account/login/login.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".question-select {\\r\\n  margin-bottom:10px;\\r\\n}\\r\\n\\r\\n.submit-row {\\r\\n  margin-top:10px;\\r\\n  margin-left:10px;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/account/security-questions/security-questions.component.css\n// module id = ../../../../../src/app/account/security-questions/security-questions.component.css\n// module chunks = main","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"signup-container\\\">\\r\\n\\r\\n    <div class=\\\"page-header\\\">\\r\\n      <h3><span class=\\\"glyphicon glyphicon-lock\\\"></span> Security</h3>\\r\\n    </div>\\r\\n\\r\\n    <!-- use property binding to set the value as an object and not a string -->\\r\\n    <form [formGroup]=\\\"securityForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label>Are you a robot?</label>\\r\\n        <input type=\\\"text\\\"\\r\\n               id=\\\"robot\\\"\\r\\n               formControlName=\\\"robot\\\"\\r\\n               class=\\\"form-control\\\">\\r\\n\\r\\n        <p class=\\\"invalid-field-message\\\"\\r\\n          *ngIf=\\\"!securityForm.get('robot').valid && securityForm.get('robot').touched\\\">\\r\\n\\r\\n          <span *ngIf=\\\"securityForm.get('robot').errors['required']\\\">\\r\\n            A response to this field is required.\\r\\n          </span>\\r\\n\\r\\n          <span *ngIf=\\\"securityForm.get('robot').errors['robotResponse']\\\">\\r\\n            Please enter a response of <strong>yes</strong>, <strong>no</strong>, or <strong>maybe</strong>\\r\\n          </span>\\r\\n        </p>\\r\\n\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <h4>Questions <small>choose {{ minimumQuestions }}</small></h4>\\r\\n\\r\\n        <div class=\\\"form-group\\\"\\r\\n             formArrayName=\\\"securityQuestions\\\"\\r\\n             *ngFor=\\\"let i = index; let question of securityForm.get('securityQuestions').controls\\\">\\r\\n\\r\\n          <span>Question {{ i + 1}}</span>\\r\\n\\r\\n          <select\\r\\n            [id]=\\\"'question_' + i\\\"\\r\\n            [name]=\\\"'question_' + i\\\"\\r\\n            #questionSelect\\r\\n            class=\\\"form-control question-select\\\">\\r\\n            <option *ngFor=\\\"let q of securityQuestions\\\">{{q}}</option>\\r\\n          </select>\\r\\n\\r\\n          <!-- property bind to set the value, not the string -->\\r\\n          <input type=\\\"text\\\"\\r\\n            [id]=\\\"'answer_' + i\\\"\\r\\n            [name]=\\\"'answer_' + i\\\"\\r\\n            #answerInput\\r\\n            [formControlName]=\\\"i\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            required\\r\\n            (blur)=\\\"onAnswerBlur(i, questionSelect.value, answerInput.value)\\\">\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <button type=\\\"button\\\"\\r\\n                [disabled]=\\\"isQuestionAddDisabled()\\\"\\r\\n                (click)=\\\"onQuestionAdd()\\\"\\r\\n                class=\\\"btn btn-default form-control\\\">\\r\\n          Add\\r\\n        </button>\\r\\n\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n\\r\\n          <div class=\\\"col-xs-2\\\">\\r\\n            <button id='submit'\\r\\n                    type=\\\"submit\\\"\\r\\n                    [disabled]=\\\"isSubmitDisabled()\\\"\\r\\n                    class=\\\"btn btn-primary\\\">\\r\\n              Submit\\r\\n            </button>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-xs-10\\\">\\r\\n            <p class=\\\"invalid-field-message submit-row\\\"\\r\\n              *ngIf=\\\"isFormSubmitted && !areQuestionsValid\\\">\\r\\n              You must select 3 different questions.\\r\\n            </p>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </form>\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/account/security-questions/security-questions.component.html\n// module id = ../../../../../src/app/account/security-questions/security-questions.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport {FormArray, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {AccountService} from '../account.service';\r\nimport {Account} from '../account.model';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-security-questions',\r\n  templateUrl: './security-questions.component.html',\r\n  styleUrls: ['./security-questions.component.css']\r\n})\r\nexport class SecurityQuestionsComponent implements OnInit {\r\n\r\n  securityForm: FormGroup;\r\n\r\n  numberofQuestions: number;\r\n  minimumQuestions: number = 3;\r\n  timeoutKey: any;\r\n\r\n  validRobotResponse: string[] = ['yes', 'no', 'maybe'];\r\n  securityQuestions: string[] = [\r\n    'What is your favorite color?',\r\n    'What is your first pet\\'s name?',\r\n    'What is your favorite number?',\r\n    'What city were you born in?',\r\n    'What was your first car?'\r\n  ];\r\n\r\n  selectedQuestions: any[] = [];\r\n\r\n  isFormSubmitted: boolean;\r\n  areQuestionsValid: boolean;\r\n\r\n  constructor(private accountService: AccountService,\r\n              private router: Router) { }\r\n\r\n  ngOnInit() {\r\n\r\n    if(this.accountService.getAccount() == null) {\r\n      this.router.navigate(['']);\r\n    }\r\n\r\n    this.numberofQuestions = 0;\r\n\r\n    // initialize the form\r\n    this.securityForm = new FormGroup({\r\n      'robot': new FormControl(null, [\r\n        Validators.required,\r\n        this.isValidRobotResponse.bind(this)\r\n      ]),\r\n\r\n      // initialize empty to dynamically populate\r\n      'securityQuestions': new FormArray([])\r\n    });\r\n  }\r\n\r\n  isSubmitDisabled() {\r\n    return !this.securityForm.valid;\r\n  }\r\n\r\n  isValidRobotResponse(control: FormControl): {[key: string]: boolean} {\r\n    const value = control.value !== null\r\n      ? control.value.toLowerCase() : null;\r\n\r\n    // ignore blank or null, 'required' validator will catch it\r\n    if (value === '' || value === null) {\r\n      return null;\r\n    }\r\n\r\n    if (this.validRobotResponse.indexOf(value) === -1) {\r\n      return {'robotResponse': true};\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  isQuestionAddDisabled() {\r\n    return this.numberofQuestions >= this.minimumQuestions;\r\n  }\r\n\r\n  onQuestionAdd() {\r\n    this.numberofQuestions++;\r\n    const formArray: FormArray = (<FormArray>this.securityForm.get('securityQuestions'));\r\n    formArray.push(new FormControl(null, Validators.required));\r\n  }\r\n\r\n  onAnswerBlur(index, question, answer) {\r\n    this.selectedQuestions[index] = { question, answer };\r\n  }\r\n\r\n  evaluateQuestions() {\r\n\r\n    const totalSelectedQuestions = this.selectedQuestions.length;\r\n    if(totalSelectedQuestions === 0 || totalSelectedQuestions < this.minimumQuestions) {\r\n      return false;\r\n    }\r\n\r\n    // don't allow duplicates\r\n    for(let i = 0; i < totalSelectedQuestions; i++) {\r\n      for(let j = 0; j < totalSelectedQuestions; j++) {\r\n\r\n        // avoid comparing against self\r\n        if (i === j) {\r\n          continue;\r\n        }\r\n\r\n        // ensure that two of the same questions are not selected\r\n        const current = this.selectedQuestions[i]['question'];\r\n        const compare = this.selectedQuestions[j]['question'];\r\n        if(current === compare) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.isFormSubmitted = true;\r\n    this.areQuestionsValid = this.evaluateQuestions();\r\n\r\n    if(!this.areQuestionsValid) {\r\n\r\n      //clear the interval to prevent duplication\r\n      if(typeof this.timeoutKey !== 'undefined') {\r\n        clearTimeout(this.timeoutKey);\r\n      }\r\n\r\n      // set a timeout to clear the isFormSubmitted flag\r\n      this.timeoutKey = setTimeout(() => {\r\n        this.isFormSubmitted = false;\r\n      }, 3000);\r\n\r\n      return;\r\n    }\r\n\r\n    //build a separate object to work around the hacky q&a impl.\r\n    //update the account info captured earlier\r\n    let account: Account = this.accountService.getAccount();\r\n    account.setSecurity({\r\n      'robot': this.securityForm.get('robot').value,\r\n      'questions': this.selectedQuestions\r\n    });\r\n\r\n    this.router.navigate(['confirm']);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/app/account/security-questions/security-questions.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".signup-buttons {\\r\\n  width:140px;\\r\\n  margin-left:auto;\\r\\n  margin-right:auto;\\r\\n}\\r\\n\\r\\n.home-link {\\r\\n  display:block;\\r\\n  width:85px;\\r\\n  margin:0 auto;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/account/signup/signup.component.css\n// module id = ../../../../../src/app/account/signup/signup.component.css\n// module chunks = main","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"signup-container\\\">\\n\\n    <div class=\\\"page-header\\\">\\n      <h3>Sign up</h3>\\n    </div>\\n\\n    <form (ngSubmit)=\\\"onSubmit(signupForm)\\\" #signupForm=\\\"ngForm\\\">\\n      <!-- ngModel tells angular that a field is an active control of the form -->\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"firstname\\\">First name</label>\\n        <input type=\\\"text\\\"\\n               id=\\\"firstname\\\"\\n               name=\\\"firstname\\\"\\n               class=\\\"form-control\\\"\\n               required\\n               ngModel\\n               #firstname=\\\"ngModel\\\">\\n        <p class=\\\"invalid-field-message\\\" *ngIf=\\\"!firstname.valid && firstname.touched\\\">\\n          A first name <em>must</em> be supplied\\n        </p>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"lastname\\\">Last name</label>\\n        <input type=\\\"text\\\"\\n               id=\\\"lastname\\\"\\n               name=\\\"lastname\\\"\\n               class=\\\"form-control\\\"\\n               required\\n               ngModel\\n               #lastname=\\\"ngModel\\\">\\n        <p class=\\\"invalid-field-message\\\" *ngIf=\\\"!lastname.valid && lastname.touched\\\">\\n          A last name <em>must</em> be supplied\\n        </p>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"accountType\\\">Account type</label>\\n        <select id=\\\"accountType\\\"\\n                name=\\\"accountType\\\"\\n                [ngModel]=\\\"selectedAccountType\\\"\\n                class=\\\"form-control\\\">\\n          <option *ngFor=\\\"let type of accountTypes\\\"\\n            [value]=\\\"type\\\">{{type}}</option>\\n        </select>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input type=\\\"text\\\"\\n               id=\\\"email\\\"\\n               name=\\\"email\\\"\\n               class=\\\"form-control\\\"\\n               ngModel\\n               required\\n               email\\n               #email=\\\"ngModel\\\">\\n        <!-- email must be bound to ngModel in order to gain access in the control statement below -->\\n        <p class='invalid-field-message' *ngIf=\\\"!email.valid && email.touched\\\">Please enter a valid email address.</p>\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\"\\n               id=\\\"password\\\"\\n               name=\\\"password\\\"\\n               class=\\\"form-control\\\"\\n               required\\n               ngModel\\n               #password=\\\"ngModel\\\">\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"confirmPassword\\\">Confirm Password</label>\\n        <input type=\\\"password\\\"\\n               id=\\\"confirmPassword\\\"\\n               name=\\\"confirmPassword\\\"\\n               class=\\\"form-control\\\"\\n               required\\n               ngModel\\n               #confirmPassword=\\\"ngModel\\\">\\n        <p class=\\\"invalid-field-message\\\" *ngIf=\\\"!arePasswordsValid() && arePasswordsTouched()\\\">\\n          Password fields do not match.\\n        </p>\\n      </div>\\n\\n      <div class=\\\"form-group signup-buttons\\\">\\n        <button type=\\\"submit\\\"\\n                class='btn btn-primary'\\n                [disabled]=\\\"!isSubmitEnabled()\\\">Submit</button>\\n\\n        <button type=\\\"button\\\"\\n                class=\\\"btn btn-warning\\\"\\n                (click)=\\\"onReset()\\\">Reset</button>\\n\\n      </div>\\n\\n      <div class=\\\"form-group\\\">\\n        <a [routerLink]=\\\"['/']\\\" class=\\\"home-link\\\">Return home</a>\\n      </div>\\n    </form>\\n\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/account/signup/signup.component.html\n// module id = ../../../../../src/app/account/signup/signup.component.html\n// module chunks = main","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {NgForm, NgModel} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {AccountService} from '../account.service';\r\nimport {Account} from '../account.model';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n\r\n  accountTypes: string[] = ['Basic', 'Advanced', 'Pro'];\r\n  selectedAccountType: string;\r\n\r\n  @ViewChild('firstname') fieldname;\r\n  @ViewChild('password') password: NgModel;\r\n  @ViewChild('confirmPassword') confirmPassword: NgModel;\r\n  @ViewChild('signupForm') signupForm: NgForm;\r\n\r\n  constructor(private account: AccountService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.selectedAccountType = 'Pro';\r\n  }\r\n\r\n  onSubmit(signupForm: NgForm) {\r\n\r\n    if(signupForm.valid) {\r\n\r\n      this.account.confirm(new Account(\r\n        signupForm.value.firstname,\r\n        signupForm.value.lastname,\r\n        signupForm.value.accountType,\r\n        signupForm.value.email,\r\n        signupForm.value.password,\r\n        signupForm.value.confirmPassword,\r\n      ));\r\n\r\n      this.router.navigate(['security']);\r\n    }\r\n  }\r\n\r\n  onReset() {\r\n    this.signupForm.form.setValue({\r\n      'firstname': 'test',\r\n      'lastname': 'user',\r\n      'accountType': 'Pro',\r\n      'email': 'testuser@mail.com',\r\n      'password': 'banana',\r\n      'confirmPassword': 'banana'\r\n    });\r\n  }\r\n\r\n  isSubmitEnabled() {\r\n    const enabled: boolean = this.arePasswordsValid()\r\n              && this.arePasswordsTouched()\r\n              && this.signupForm.valid;\r\n\r\n    return enabled;\r\n  }\r\n  arePasswordsTouched() {\r\n    return (this.password.touched && this.confirmPassword.touched);\r\n  }\r\n\r\n  arePasswordsValid() {\r\n    const pw = this.password.value;\r\n    const cpw = this.confirmPassword.value;\r\n    return (pw === cpw && this.arePasswordsTouched());\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/app/account/signup/signup.component.ts","import {NgModule} from '@angular/core';\r\nimport {RouterModule} from '@angular/router';\r\nimport {AppComponent} from './app.component';\r\nimport {SignupComponent} from './account/signup/signup.component';\r\nimport {LoginComponent} from './account/login/login.component';\r\nimport {ConfirmComponent} from './account/confirm/confirm.component';\r\nimport {SecurityQuestionsComponent} from './account/security-questions/security-questions.component';\r\n\r\nconst appRoutes = [\r\n  { path: '', component: LoginComponent },\r\n  { path: 'signup', component: SignupComponent },\r\n  { path: 'security', component: SecurityQuestionsComponent },\r\n  { path: 'confirm', component: ConfirmComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(appRoutes)\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ]\r\n})\r\nexport class AppRoutingModule {\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/app/app-routing.module.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<div class=\\\"container\\\">\\n\\n    <router-outlet></router-outlet>\\n\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// D:/workspace.web/angular-forms/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import {Component, OnInit} from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit() {\n\n  }\n\n  onSubmit(loginForm: NgForm) {\n    console.log('form submitted');\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport { SignupComponent } from './account/signup/signup.component';\r\nimport { LoginComponent } from './account/login/login.component';\r\nimport { ConfirmComponent } from './account/confirm/confirm.component';\r\nimport {AccountService} from './account/account.service';\r\nimport { SecurityQuestionsComponent } from './account/security-questions/security-questions.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    SignupComponent,\r\n    LoginComponent,\r\n    ConfirmComponent,\r\n    SecurityQuestionsComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [ AccountService ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// D:/workspace.web/angular-forms/src/main.ts"],"sourceRoot":"webpack:///"}